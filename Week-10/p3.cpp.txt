//by-ptnv-s
#include <stdio.h>
#include<stdlib.h>
#include <mpi.h>

#define VECTOR_SIZE 10

int main(int argc, char* argv[]) {
    int rank, size;
    int vector1[VECTOR_SIZE], vector2[VECTOR_SIZE], result[VECTOR_SIZE];
    int i;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    if (rank == 0) {
        printf("Enter %d elements for vector 1:\n", VECTOR_SIZE);
        for (i = 0; i < VECTOR_SIZE; i++) {
            scanf_s("%d", &vector1[i]);
            fflush(stdin);

        }
        printf("Enter %d elements for vector 2:\n", VECTOR_SIZE);
        for (i = 0; i < VECTOR_SIZE; i++) {
            scanf_s("%d", &vector2[i]);
            fflush(stdin);

        }
    }
    MPI_Barrier(MPI_COMM_WORLD);
    if (rank == 0) {
        printf("\n%d elements for vector 1:\n", VECTOR_SIZE);
        for (i = 0; i < VECTOR_SIZE; i++) {
            printf("%d ",vector1[i]);
        }
        printf("\n%d elements for vector 2:\n", VECTOR_SIZE);
        for (i = 0; i < VECTOR_SIZE; i++) {
            printf("%d ", vector2[i]);
        }
        printf("\n");
    }
    MPI_Barrier(MPI_COMM_WORLD);
    int local_size = VECTOR_SIZE / size;
    int* local_vector1;
    int* local_vector2;
    int* local_result;
    local_vector1 = (int*)malloc(local_size * sizeof(int));
    local_vector2 = (int*)malloc(local_size * sizeof(int));
    local_result = (int*)malloc(local_size * sizeof(int));


    MPI_Scatter(vector1, local_size, MPI_INT, local_vector1, local_size, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Scatter(vector2, local_size, MPI_INT, local_vector2, local_size, MPI_INT, 0, MPI_COMM_WORLD);
    for (i = 0; i < local_size; i++) {
        local_result[i] = local_vector1[i] + local_vector2[i];
    }
    MPI_Gather(local_result, local_size, MPI_INT, result, local_size, MPI_INT, 0, MPI_COMM_WORLD);
    if (rank == 0) {
        printf("Vector addition result:\n");
        for (i = 0; i < VECTOR_SIZE; i++) {
            printf("%d ", result[i]);
        }
        printf("\n");
    }
    MPI_Barrier(MPI_COMM_WORLD);
    for (i = 0; i < local_size; i++) {
        local_result[i] = local_vector1[i] - local_vector2[i];
    }
    MPI_Gather(local_result, local_size, MPI_INT, result, local_size, MPI_INT, 0, MPI_COMM_WORLD);
    if (rank == 0) {
        printf("Vector subtraction result:\n");
        for (i = 0; i < VECTOR_SIZE; i++) {
            printf("%d ", result[i]);
        }
        printf("\n");
    }
    MPI_Barrier(MPI_COMM_WORLD);
    for (i = 0; i < local_size; i++) {
        local_result[i] = local_vector1[i] * local_vector2[i];
    }
    MPI_Gather(local_result, local_size, MPI_INT, result, local_size, MPI_INT, 0, MPI_COMM_WORLD);
    if (rank == 0) {
        printf("Vector multiplication result:\n");
        for (i = 0; i < VECTOR_SIZE; i++) {
            printf("%d ", result[i]);
        }
        printf("\n");
    }
    MPI_Barrier(MPI_COMM_WORLD);
    for (i = 0; i < local_size; i++) {
        local_result[i] = local_vector1[i] / local_vector2[i];
    }
    MPI_Gather(local_result, local_size, MPI_INT, result, local_size, MPI_INT, 0, MPI_COMM_WORLD);
    if (rank == 0) {
        printf("Vector division result:\n");
        for (i = 0; i < VECTOR_SIZE; i++) {
            printf("%d ", result[i]);
        }
        printf("\n");
    }
    MPI_Finalize();
}