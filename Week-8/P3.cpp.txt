#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include<iostream>
int main(int argc, char** argv) {
    int num_procs, my_rank;
    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &num_procs);
    MPI_Comm_rank(MPI_COMM_WORLD, &my_rank);
    int size_of_array = num_procs;
    int* array_ip = (int*)malloc(sizeof(int) * num_procs);

    if (my_rank == 0) {
        for (int i = 0; i < size_of_array; i++) {
            array_ip[i] = rand() %10;
        }
        for (int dest = 1; dest < num_procs; dest++) {
            int buffer_attached_size = MPI_BSEND_OVERHEAD + sizeof(int);
            char* buffer_attached = (char*)malloc(buffer_attached_size);
            MPI_Buffer_attach(buffer_attached, buffer_attached_size);
            MPI_Bsend(&array_ip[dest],1, MPI_INT, dest, 0, MPI_COMM_WORLD);
            MPI_Buffer_detach(&buffer_attached, &buffer_attached_size);
        }
    }
    else {
        if (my_rank % 2 == 0) {
            int recv_message = 0;
            MPI_Recv(&recv_message, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            printf("Process %d received data %d processed it as %d\n", my_rank,recv_message, recv_message* recv_message);
        }
        else {
            int recv_message = 0;
            MPI_Recv(&recv_message, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            printf("Process %d received data %d processed it as %d\n", my_rank, recv_message, recv_message * recv_message * recv_message);
        }
        }        

    MPI_Finalize();
    return 0;
}
