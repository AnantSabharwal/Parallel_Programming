//by-ptnv-s
#include <stdio.h>
#include <mpi.h>
#include<stdlib.h>

#define MAX_SIZE 100

int main(int argc, char* argv[]) {
    int rank, size, i, j;
    int M, N;
    int array[MAX_SIZE], local_array[MAX_SIZE], local_sum = 0;
    double local_avg, total_avg;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    if (rank == 0) {
        printf("Enter the value of M:\n");
        scanf_s("%d", &M);
        printf("Enter the value of N (should be equal to number of processes):\n");
        scanf_s("%d", &N);
        printf("Enter %d elements for the array:\n", N * M);
        for (i = 0; i < N * M; i++) {
            scanf_s("%d", &array[i]);
        }
    }
    MPI_Bcast(&M, 1, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Bcast(&N, 1, MPI_INT, 0, MPI_COMM_WORLD);
    int local_size = M;
    MPI_Scatter(array, local_size, MPI_INT, local_array, local_size, MPI_INT, 0, MPI_COMM_WORLD);
    for (i = 0; i < local_size; i++) {
        local_sum += local_array[i];
    }
    local_avg = (double)local_sum / M;
    MPI_Reduce(&local_avg, &total_avg, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
    if (rank == 0) {
        printf("Total average is: %lf\n", total_avg / N);
    }
    MPI_Finalize();
    return 0;
}
