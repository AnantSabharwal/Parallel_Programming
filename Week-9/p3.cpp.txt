//by-ptnv-s
#include <stdio.h>
#include <string.h>
#include<stdio.h>
#include <mpi.h>

int main(int argc, char* argv[]) {
    int rank, size, i, j, n;
    char str[100], local_str[100];
    int local_count = 0, total_count = 0;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        printf("Enter the string: ");
        fflush(stdout);
        fgets(str, 100, stdin);
        fflush(stdin);
        n = strlen(str);
    }

    MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);
    int local_size = n / size;
    MPI_Scatter(str, local_size, MPI_CHAR, local_str, local_size, MPI_CHAR, 0, MPI_COMM_WORLD);

    for (i = 0; i < local_size; i++) {
        if (local_str[i] != 'a' && local_str[i] != 'e' && local_str[i] != 'i' && local_str[i] != 'o' && local_str[i] != 'u' && local_str[i] != 'A' && local_str[i] != 'E' && local_str[i] != 'I' && local_str[i] != 'O' && local_str[i] != 'U') {
            local_count++;
        }
    }

    MPI_Reduce(&local_count, &total_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Number of non-vowels found by each process: ");
        for (i = 0; i < size; i++) {
            printf("%d ", n / size - total_count % size > i ? total_count / size + 1 : total_count / size);
        }
        printf("\nTotal number of non-vowels: %d\n", total_count);
    }

    MPI_Finalize();
    return 0;
}
